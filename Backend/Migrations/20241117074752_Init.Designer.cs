// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241117074752_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.Cart", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Pid"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.Property<int>("cid")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("_cart");
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Property<int>("Cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cid"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Cid");

                    b.ToTable("_category");
                });

            modelBuilder.Entity("Backend.Models.Item", b =>
                {
                    b.Property<int>("Iid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Iid"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Cid")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Iid");

                    b.HasIndex("CartId");

                    b.HasIndex("Cid");

                    b.ToTable("_item");
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.Property<int>("Oid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Oid"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.HasKey("Oid");

                    b.HasIndex("CartId");

                    b.HasIndex("Uid");

                    b.ToTable("_order");
                });

            modelBuilder.Entity("Backend.Models.User_Other_Info", b =>
                {
                    b.Property<int>("Uid")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Uid");

                    b.ToTable("_user_other_info");
                });

            modelBuilder.Entity("Backend.Models.User_detail", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uid"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Uid");

                    b.ToTable("_user_detail");
                });

            modelBuilder.Entity("Backend.Models.Cart", b =>
                {
                    b.HasOne("Backend.Models.User_detail", "user")
                        .WithOne("Cart")
                        .HasForeignKey("Backend.Models.Cart", "Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.Item", b =>
                {
                    b.HasOne("Backend.Models.Cart", "Cart")
                        .WithMany("item")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Category", "Category")
                        .WithMany("category_items")
                        .HasForeignKey("Cid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Models.Order", b =>
                {
                    b.HasOne("Backend.Models.Cart", "cart")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("Backend.Models.User_detail", "user")
                        .WithMany("Orders")
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.Models.User_Other_Info", b =>
                {
                    b.HasOne("Backend.Models.User_detail", "UserDetail")
                        .WithOne("UserOtherInfo")
                        .HasForeignKey("Backend.Models.User_Other_Info", "Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("Backend.Models.Cart", b =>
                {
                    b.Navigation("item");
                });

            modelBuilder.Entity("Backend.Models.Category", b =>
                {
                    b.Navigation("category_items");
                });

            modelBuilder.Entity("Backend.Models.User_detail", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("UserOtherInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
